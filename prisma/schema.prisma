// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Example {
  id   String @id @default(uuid())
  name String
}

model CartItem {
  id        String    @id @default(uuid())
  quantity  Int?
  products  Products? @relation(fields: [productId], references: [id])
  productId String?
  Cart      Cart?     @relation(fields: [cartId], references: [id])
  cartId    String?

  @@index([productId])
  @@index([cartId])
}

model Cart {
  id     String     @id @default(uuid())
  user   User?      @relation(fields: [userId], references: [id])
  userId String?    @unique
  items  CartItem[]

  @@index([userId])
}

model DeliveryLocations {
  id       String  @id @default(uuid())
  location String?
  rate     Int?
}

model Attributes {
  id        String    @id @default(uuid())
  name      String?
  value     String?
  product   Products? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?

  @@index([productId])
}

model Favorites {
  id        String   @id @default(uuid())
  productId String[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique

  @@index([productId])
  @@index([userId])
}

model Images {
  id         String       @id @default(uuid())
  src        String?      @unique
  searchText String[]
  altText    String?
  Products   Products[]
  Categories Categories[]

  @@index([src])
  @@index([searchText])
}

model Products {
  id             String       @id @default(uuid())
  title          String?
  slug           String?      @unique
  description    String?
  regularPrice   Int? // @default(0)
  salePrice      Int? // @default(0)
  purchasePrice  Int? // @default(0)
  purchaseLimit  Int? // @default(0)
  isTrackStock   Boolean?     @default(false)
  isReviewEnable Boolean?     @default(true)
  isPublished    Boolean?     @default(false)
  isFeatured     Boolean?     @default(false)
  stock          Int? // @default(0)
  ytVideosIds    String[]
  variantBy      Products[]   @relation("variants")
  variants       Products[]   @relation("variants")
  createdAt      DateTime?    @default(now())
  updatedAt      DateTime?    @updatedAt
  images         Images[]
  Categories     Categories[]
  Attributes     Attributes[]
  CartItem       CartItem[]

  @@index([slug])
  @@index([isPublished])
  @@index([isFeatured])
  @@index([isReviewEnable])
  @@index([ytVideosIds])
}

model Categories {
  id                   String       @id @default(uuid())
  name                 String?
  images               Images?      @relation(fields: [imageId], references: [id])
  slug                 String?      @unique
  order                Int?         @default(0)
  displayOnLandingPage Boolean?     @default(false)
  isPublished          Boolean?     @default(false)
  parentCategoryId     String?
  parentCategory       Categories?  @relation("subCategory", fields: [parentCategoryId], references: [id])
  subCategory          Categories[] @relation("subCategory")
  Products             Products[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  imageId              String?

  @@index([slug])
  @@index([displayOnLandingPage])
  @@index([isPublished])
  @@index([imageId])
  @@index([parentCategoryId])
}

// Next-Auth

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(uuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  role          String?     @default("customer")
  Account       Account[]
  Session       Session[]
  favorites     Favorites[]
  Cart          Cart?
}
